
R version 3.5.3 Patched (2019-03-11 r76311) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> 
> library(jaffelab)
Loading required package: rafalib
> library(SummarizedExperiment)
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colMeans,
    colnames, colSums, dirname, do.call, duplicated, eval, evalq,
    Filter, Find, get, grep, grepl, intersect, is.unsorted, lapply,
    lengths, Map, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, Position, rank, rbind, Reduce, rowMeans, rownames,
    rowSums, sapply, setdiff, sort, table, tapply, union, unique,
    unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians

Loading required package: BiocParallel

Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following objects are masked from ‘package:base’:

    aperm, apply

> library(sva)
Loading required package: mgcv
Loading required package: nlme

Attaching package: ‘nlme’

The following object is masked from ‘package:IRanges’:

    collapse

This is mgcv 1.8-27. For overview type 'help("mgcv-package")'.
Loading required package: genefilter

Attaching package: ‘genefilter’

The following objects are masked from ‘package:matrixStats’:

    rowSds, rowVars

> library('readxl')
> library('devtools')
> library(recount)
Setting options('download.file.method.GEOquery'='auto')
Setting options('GEOquery.inmemory.gpl'=FALSE)
> 
> setwd('/dcl02/lieber/ptsd/RNAseq/VA_PTSD_RNAseq/')
> 
> 
> #load rse_gene object
> load('rdas/rse_gene_PTSD_VA_LIBD_qcAndAnnotated_n1285.Rdata')
> 
> ## add MDS (get ethnicity via genotype)
> load("rdas/PTSD_LIBD_VA_MDSonly_n326.rda")
> rownames(mds) = ss(rownames(mds),"_")
> colData(rse_gene) = cbind(colData(rse_gene) , mds[rse_gene$BrNum,])
> 
> ## add antidepressants data to rse_gene
> load("rdas/rse_gene_PTSD_cohort_Feb2019.rda")
> #change encoding of antidepressants_ssris to be 0 or 1 instead of true or false
> #Note, changes the 3 "NA" samples to 0
> demo$antidepressants_ssris <- ifelse(demo$antidepressants_ssris == "TRUE",1,0)
> demo$antidepressants_ssris[is.na(demo$antidepressants_ssris)] <- 0
> colnames(demo)[4] = "BrNum"
> rownames(demo) = demo$BrNum
> colData(rse_gene) = cbind(colData(rse_gene) , demo[rse_gene$BrNum,54, drop=FALSE])
> 
> ## expression filter to remove lowly expressed stuff (can do later as well)
> ##		do across all regions so we're looking at the same genes
> gIndex = rowMeans(getRPKM(rse_gene, "Length")) > 0.2
> rse_gene <- rse_gene[gIndex , ]
> 
> load('rdas/PTSD_qsvs_sensitivity_antidepressants.Rdata')
> 
> 
> ###Analysis
> 
> library(jaffelab)
> library(SummarizedExperiment)
> library(limma)

Attaching package: ‘limma’

The following object is masked from ‘package:BiocGenerics’:

    plotMA

> library(edgeR)
> library('devtools')
> library(recount)
> 
> #filter for DLPFC 
> keepIndex = which(rse_gene$Region == "DLPFC")
> rse_gene <- rse_gene[, keepIndex]
> 
> #Get rid of region columns
> colIndex <-  !grepl("Region", colnames(mod))
> mod <- mod[keepIndex, colIndex]
> modQsva <- modQsva[keepIndex,!grepl("Region", colnames(modQsva))]
> colnames(modQsva)[1] = "Int"
> 
> ##### GENE ######
> dge = DGEList(counts = assays(rse_gene)$counts,
+ 	genes = rowData(rse_gene))
> 
> #calculate library-size adjustment
> dge = calcNormFactors(dge)
> vGene = voom(dge,modQsva, plot=TRUE)
> fitGene = lmFit(vGene)
> eBGene = eBayes(fitGene)
> 
> #MDD vs controls (analysis 1)
> sigGeneMDD = topTable(eBGene,coef=2,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneMDD) = paste0(colnames(sigGeneMDD), "_MDD")
> 
> #PTSD vs controls (analysis 1)
> sigGenePTSD = topTable(eBGene,coef=3,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGenePTSD) = paste0(colnames(sigGenePTSD), "_PTSD")
> 
> #Interaction (analysis 3)
> sigGeneDx = topTable(eBGene,coef=2:3,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneDx) = paste0(colnames(sigGeneDx), "_ANOVA")
> 
> #PTSDvsMDD using limma
> PTSDvsMDDContrast <- makeContrasts(GroupPTSD-GroupMDD,levels=modQsva)
> PTSDvsMDDPost = topTable(eBayes(contrasts.fit(fitGene, PTSDvsMDDContrast)),
+     coef=1,  p.value = 1, sort="none", n = nrow(rse_gene))
> colnames(PTSDvsMDDPost) = paste0(colnames(PTSDvsMDDPost), "_PTSDvsMDD")
> 
> 
> #onlyPTSD analysis (analysis 2)
> # 1. redefine model
> # 2. add to geneStats
> 
> #load rse_gene object
> load('rdas/rse_gene_PTSD_VA_LIBD_qcAndAnnotated_n1285.Rdata')
> 
> ## add MDS (get ethnicity via genotype)
> load("rdas/PTSD_LIBD_VA_MDSonly_n326.rda")
> rownames(mds) = ss(rownames(mds),"_")
> colData(rse_gene) = cbind(colData(rse_gene) , mds[rse_gene$BrNum,])
> 
> ## add antidepressants data to rse_gene
> load("rdas/rse_gene_PTSD_cohort_Feb2019.rda")
> #change encoding of antidepressants_ssris to be 0 or 1 instead of true or false
> #Note, changes the 3 "NA" samples to 0
> demo$antidepressants_ssris <- ifelse(demo$antidepressants_ssris == "TRUE",1,0)
> demo$antidepressants_ssris[is.na(demo$antidepressants_ssris)] <- 0
> colnames(demo)[4] = "BrNum"
> rownames(demo) = demo$BrNum
> colData(rse_gene) = cbind(colData(rse_gene) , demo[rse_gene$BrNum,54, drop=FALSE])
> 
> ## expression filter to remove lowly expressed stuff (can do later as well)
> ##		do across all regions so we're looking at the same genes
> gIndex = rowMeans(getRPKM(rse_gene, "Length")) > 0.2
> rse_gene <- rse_gene[gIndex , ]
> 
> #Define by PTSD 
> rse_gene$onlyPTSD = ifelse(rse_gene$Group == "PTSD" ,1, 0) 
> 
> load('rdas/PTSD_onlyPTSD_qsvs_sensitivity_antidepressants.Rdata')
> 
> 
> #filter for DLPFC 
> keepIndex = which(rse_gene$Region == "DLPFC")
> rse_gene <- rse_gene[, keepIndex]
> 
> #Get rid of region columns
> colIndex <- !grepl("Region", colnames(mod))
> mod <- mod[keepIndex, colIndex]
> modQsva <- modQsva[keepIndex,!grepl("Region", colnames(modQsva))]
> colnames(modQsva)[1] = "Int"
> 
> ##### GENE ######
> dge = DGEList(counts = assays(rse_gene)$counts,
+ 	genes = rowData(rse_gene))
> #calculate library-size adjustment
> dge = calcNormFactors(dge)
> vGene = voom(dge,modQsva, plot=TRUE)
> fitGene = lmFit(vGene)
> eBGene = eBayes(fitGene)
> 
> #PTSD only
> sigGeneonlyPTSD = topTable(eBGene,coef=2,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneonlyPTSD) = paste0(colnames(sigGeneonlyPTSD), "_onlyPTSD")
> 
> 
> ###Stuff we want
> 
> #Merge qSVA into one big genestats dataframe
> geneStats = cbind(sigGenePTSD, sigGeneMDD, sigGeneDx ,sigGeneonlyPTSD, PTSDvsMDDPost)
> geneStats = cbind(geneStats, rowData(rse_gene))
> 
> 
> ## write out qSVA-based stats
> geneStats_DLPFC = geneStats
> save(geneStats_DLPFC, file = "rdas/geneStats_DE_qSVA_sensitivity_antidepressants_DLPFC_threeGroup.rda")
> write.csv(geneStats_DLPFC, file = gzfile("csvs/geneStats_DE_qSVA_sensitivity_antidepressants_DLPFC_threeGroup.csv.gz"))
> 
> 
> q()
> proc.time()
   user  system elapsed 
178.898   8.409 236.170 
