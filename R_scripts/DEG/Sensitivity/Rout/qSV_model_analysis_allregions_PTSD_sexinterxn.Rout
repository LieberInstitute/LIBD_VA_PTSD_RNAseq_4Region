
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #load up
> 
> library(jaffelab)
Loading required package: rafalib
> library(SummarizedExperiment)
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians

Loading required package: BiocParallel

Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following objects are masked from ‘package:base’:

    aperm, apply, rowsum

> library(sva)
Loading required package: mgcv
Loading required package: nlme

Attaching package: ‘nlme’

The following object is masked from ‘package:IRanges’:

    collapse

This is mgcv 1.8-28. For overview type 'help("mgcv-package")'.
Loading required package: genefilter

Attaching package: ‘genefilter’

The following objects are masked from ‘package:matrixStats’:

    rowSds, rowVars

> library('readxl')
> library('devtools')
Loading required package: usethis

Attaching package: ‘devtools’

The following object is masked from ‘package:rafalib’:

    install_bioc

> library(recount)
Setting options('download.file.method.GEOquery'='auto')
Setting options('GEOquery.inmemory.gpl'=FALSE)
> library(limma)

Attaching package: ‘limma’

The following object is masked from ‘package:BiocGenerics’:

    plotMA

> library(edgeR)
> 
> 
> setwd('/dcl02/lieber/ptsd/RNAseq/VA_PTSD_RNAseq/')
> 
> ###BasoAmyg
> 
> #load rse_gene object
> load('rdas/rse_gene_PTSD_VA_LIBD_qcAndAnnotated_n1285.Rdata')
> 
> ## add MDS (get ethnicity via genotype)
> load("rdas/PTSD_LIBD_VA_MDSonly_n326.rda")
> rownames(mds) = ss(rownames(mds),"_")
> colData(rse_gene) = cbind(colData(rse_gene) , mds[rse_gene$BrNum,])
> 
> 
> ## expression filter to remove lowly expressed stuff (can do later as well)
> ##		do across all regions so we're looking at the same genes
> gIndex = rowMeans(getRPKM(rse_gene, "Length")) > 0.2
> rse_gene <- rse_gene[gIndex , ]
> 
> 
> load('rdas/PTSD_qsvs_sexinterxn.Rdata',verbose=TRUE)
Loading objects:
  qsvBonf
  qSVs
  mod
  modQsva
> 
> 
> ###Analysis
> 
> #filter for BasoAmyg 
> keepIndex = which(rse_gene$Region == "BasoAmyg")
> rse_gene <- rse_gene[, keepIndex]
> 
> #Get rid of region columns
> colIndex <-  !grepl("Region", colnames(mod))
> mod <- mod[keepIndex, colIndex]
> modQsva <- modQsva[keepIndex,!grepl("Region", colnames(modQsva))]
> 
> 
> ##### GENE ######
> dge = DGEList(counts = assays(rse_gene)$counts,
+ 	genes = rowData(rse_gene))
> 
> #calculate library-size adjustment
> dge = calcNormFactors(dge)
> vGene = voom(dge,modQsva, plot=TRUE)
> fitGene = lmFit(vGene)
> eBGene = eBayes(fitGene)
> 
> 
> #MDD vs controls (analysis 1)
> sigGeneMDD = topTable(eBGene,coef=2,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneMDD) = paste0(colnames(sigGeneMDD), "_MDD")
> 
> #PTSD vs controls (analysis 1)
> sigGenePTSD = topTable(eBGene,coef=3,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGenePTSD) = paste0(colnames(sigGenePTSD), "_PTSD")
> 
> #Diagnosis interaction (analysis 3)
> sigGeneDx = topTable(eBGene,coef=2:3,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneDx) = paste0(colnames(sigGeneDx), "_ANOVA")
> 
> #PTSDvsMDD using limma
> PTSDvsMDDContrast <- makeContrasts(GroupPTSD-GroupMDD,levels=modQsva)
> PTSDvsMDDPost = topTable(eBayes(contrasts.fit(fitGene, PTSDvsMDDContrast)),
+     coef=1,  p.value = 1, sort="none", n = nrow(rse_gene))
> colnames(PTSDvsMDDPost) = paste0(colnames(PTSDvsMDDPost), "_PTSDvsMDD")
> 
> #Sex main effect
> sigGeneSex = topTable(eBGene,coef=4,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneSex) = paste0(colnames(sigGeneSex), "_Sex")
> 
> #Sex interaction MDD
> outGene_interactionEffect_MDD = topTable(eBGene,coef=18,
+         p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(outGene_interactionEffect_MDD) = paste0(colnames(outGene_interactionEffect_MDD), "_sexintxnMDD")
> 
> #Sex interaction PTSD
> outGene_interactionEffect_PTSD = topTable(eBGene,coef=19,
+         p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(outGene_interactionEffect_PTSD) = paste0(colnames(outGene_interactionEffect_PTSD), "_sexintxnPTSD")
> 
> 
> 
> 
> #onlyPTSD analysis (analysis 2)
> # 1. redefine model
> # 2. add to geneStats
> 
> #load rse object from PTSD data
> load('rdas/rse_gene_PTSD_VA_LIBD_qcAndAnnotated_n1285.Rdata', verbose = TRUE)
Loading objects:
  rse_gene
> 
> ## add MDS (get ethnicity via genotype)
> load("rdas/PTSD_LIBD_VA_MDSonly_n326.rda")
> rownames(mds) = ss(rownames(mds),"_")
> colData(rse_gene) = cbind(colData(rse_gene) , mds[rse_gene$BrNum,])
> 
> ## expression filter to remove lowly expressed stuff
> ##		do across all regions so we're looking at the same genes
> gIndex = rowMeans(getRPKM(rse_gene, "Length")) > 0.2
> rse_gene <- rse_gene[gIndex , ]
> 
> #Define by PTSD 
> rse_gene$onlyPTSD = ifelse(rse_gene$Group == "PTSD" ,1, 0) 
> 
> load('rdas/PTSD_onlyPTSD_qsvs_sexinterxn.Rdata',verbose=TRUE)
Loading objects:
  qsvBonf
  qSVs
  mod
  modQsva
> 
> #filter for BasoAmyg 
> keepIndex = which(rse_gene$Region == "BasoAmyg")
> rse_gene <- rse_gene[, keepIndex]
> 
> #Get rid of region columns
> colIndex <- !grepl("Region", colnames(mod))
> mod <- mod[keepIndex, colIndex]
> modQsva <- modQsva[keepIndex,!grepl("Region", colnames(modQsva))]
> 
> 
> 
> ##### GENE ######
> dge = DGEList(counts = assays(rse_gene)$counts,
+ 	genes = rowData(rse_gene))
> #calculate library-size adjustment
> dge = calcNormFactors(dge)
> vGene = voom(dge,modQsva, plot=TRUE)
> fitGene = lmFit(vGene)
> eBGene = eBayes(fitGene)
> 
> #PTSD only
> sigGeneonlyPTSD = topTable(eBGene,coef=2,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneonlyPTSD) = paste0(colnames(sigGeneonlyPTSD), "_onlyPTSD")
> 
> #Sex interaction onlyPTSD
> outGene_interactionEffect_onlyPTSD = topTable(eBGene,coef=17,
+         p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(outGene_interactionEffect_onlyPTSD) = paste0(colnames(outGene_interactionEffect_onlyPTSD), "_sexintxnonlyPTSD")
> 
> 
> 
> 
> ###Stuff we want
> 
> ###### GENE ########
> 
> #All columns
> geneStatsall = cbind(sigGenePTSD, sigGeneMDD, sigGeneDx, sigGeneonlyPTSD, PTSDvsMDDPost, sigGeneSex, outGene_interactionEffect_MDD, outGene_interactionEffect_PTSD, outGene_interactionEffect_onlyPTSD)
> geneStatsall = cbind(geneStatsall, rowData(rse_gene))
> ## write out qSVA-based stats
> save(geneStatsall, file = "rdas/BasoAmyg/geneStats_allcols_DE_qSVA_sexinterxn_threeGroup.rda")
> write.csv(geneStatsall, file = gzfile("csvs/BasoAmyg/geneStats_allcols_DE_qSVA_sexinterxn_threeGroup.csv.gz"))
> 
> ##########################################################
> 
> #MedialAmyg
> 
> #load rse_gene object
> load('rdas/rse_gene_PTSD_VA_LIBD_qcAndAnnotated_n1285.Rdata',verbose=TRUE)
Loading objects:
  rse_gene
> 
> ## add MDS (get ethnicity via genotype)
> load("rdas/PTSD_LIBD_VA_MDSonly_n326.rda",verbose=TRUE)
Loading objects:
  mds
> rownames(mds) = ss(rownames(mds),"_")
> colData(rse_gene) = cbind(colData(rse_gene) , mds[rse_gene$BrNum,])
> 
> ## expression filter to remove lowly expressed stuff (can do later as well)
> ##		do across all regions so we're looking at the same genes
> gIndex = rowMeans(getRPKM(rse_gene, "Length")) > 0.2
> rse_gene <- rse_gene[gIndex , ]
> 
> load('rdas/PTSD_qsvs_sexinterxn.Rdata',verbose=TRUE)
Loading objects:
  qsvBonf
  qSVs
  mod
  modQsva
> 
> 
> ###Analysis
> 
> #filter for MedialAmyg 
> keepIndex = which(rse_gene$Region == "MedialAmyg")
> rse_gene <- rse_gene[, keepIndex]
> 
> #Get rid of region columns
> colIndex <-  !grepl("Region", colnames(mod))
> mod <- mod[keepIndex, colIndex]
> modQsva <- modQsva[keepIndex,!grepl("Region", colnames(modQsva))]
> 
> 
> ##### GENE ######
> dge = DGEList(counts = assays(rse_gene)$counts,
+ 	genes = rowData(rse_gene))
> 
> #calculate library-size adjustment
> dge = calcNormFactors(dge)
> vGene = voom(dge,modQsva, plot=TRUE)
> fitGene = lmFit(vGene)
> eBGene = eBayes(fitGene)
> 
> 
> #MDD vs controls (analysis 1)
> sigGeneMDD = topTable(eBGene,coef=2,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneMDD) = paste0(colnames(sigGeneMDD), "_MDD")
> 
> #PTSD vs controls (analysis 1)
> sigGenePTSD = topTable(eBGene,coef=3,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGenePTSD) = paste0(colnames(sigGenePTSD), "_PTSD")
> 
> #Diagnosis interaction (analysis 3)
> sigGeneDx = topTable(eBGene,coef=2:3,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneDx) = paste0(colnames(sigGeneDx), "_ANOVA")
> 
> #PTSDvsMDD using limma
> PTSDvsMDDContrast <- makeContrasts(GroupPTSD-GroupMDD,levels=modQsva)
> PTSDvsMDDPost = topTable(eBayes(contrasts.fit(fitGene, PTSDvsMDDContrast)),
+     coef=1,  p.value = 1, sort="none", n = nrow(rse_gene))
> colnames(PTSDvsMDDPost) = paste0(colnames(PTSDvsMDDPost), "_PTSDvsMDD")
> 
> #Sex main effect
> sigGeneSex = topTable(eBGene,coef=4,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneSex) = paste0(colnames(sigGeneSex), "_Sex")
> 
> 
> #Sex interaction MDD
> outGene_interactionEffect_MDD = topTable(eBGene,coef=18,
+         p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(outGene_interactionEffect_MDD) = paste0(colnames(outGene_interactionEffect_MDD), "_sexintxnMDD")
> 
> #Sex interaction PTSD
> outGene_interactionEffect_PTSD = topTable(eBGene,coef=19,
+         p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(outGene_interactionEffect_PTSD) = paste0(colnames(outGene_interactionEffect_PTSD), "_sexintxnPTSD")
> 
> 
> 
> #onlyPTSD analysis (analysis 2)
> # 1. redefine model
> # 2. add to geneStats
> 
> #load rse_gene object
> load('rdas/rse_gene_PTSD_VA_LIBD_qcAndAnnotated_n1285.Rdata',verbose=TRUE)
Loading objects:
  rse_gene
> 
> ## add MDS (get ethnicity via genotype)
> load("rdas/PTSD_LIBD_VA_MDSonly_n326.rda",verbose=TRUE)
Loading objects:
  mds
> rownames(mds) = ss(rownames(mds),"_")
> colData(rse_gene) = cbind(colData(rse_gene) , mds[rse_gene$BrNum,])
> 
> ## expression filter to remove lowly expressed stuff (can do later as well)
> ##		do across all regions so we're looking at the same genes
> gIndex = rowMeans(getRPKM(rse_gene, "Length")) > 0.2
> rse_gene <- rse_gene[gIndex , ]
> 
> #Define by PTSD 
> rse_gene$onlyPTSD = ifelse(rse_gene$Group == "PTSD" ,1, 0) 
> 
> load('rdas/PTSD_onlyPTSD_qsvs_sexinterxn.Rdata',verbose=TRUE)
Loading objects:
  qsvBonf
  qSVs
  mod
  modQsva
> 
> #filter for MedialAmyg 
> keepIndex = which(rse_gene$Region == "MedialAmyg")
> rse_gene <- rse_gene[, keepIndex]
> 
> #Get rid of region columns
> colIndex <- !grepl("Region", colnames(mod))
> mod <- mod[keepIndex, colIndex]
> modQsva <- modQsva[keepIndex,!grepl("Region", colnames(modQsva))]
> 
> 
> ##### GENE ######
> dge = DGEList(counts = assays(rse_gene)$counts,
+ 	genes = rowData(rse_gene))
> #calculate library-size adjustment
> dge = calcNormFactors(dge)
> vGene = voom(dge,modQsva, plot=TRUE)
> fitGene = lmFit(vGene)
> eBGene = eBayes(fitGene)
> 
> #PTSD only
> sigGeneonlyPTSD = topTable(eBGene,coef=2,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneonlyPTSD) = paste0(colnames(sigGeneonlyPTSD), "_onlyPTSD")
> 
> 
> #Sex interaction onlyPTSD
> outGene_interactionEffect_onlyPTSD = topTable(eBGene,coef=17,
+         p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(outGene_interactionEffect_onlyPTSD) = paste0(colnames(outGene_interactionEffect_onlyPTSD), "_sexintxnonlyPTSD")
> 
> 
> ###Stuff we want
> 
> ###### GENE ########
> 
> #All columns
> geneStatsall = cbind(sigGenePTSD, sigGeneMDD, sigGeneDx, sigGeneonlyPTSD, PTSDvsMDDPost, sigGeneSex, outGene_interactionEffect_MDD, outGene_interactionEffect_PTSD, outGene_interactionEffect_onlyPTSD)
> geneStatsall = cbind(geneStatsall, rowData(rse_gene))
> ## write out qSVA-based stats
> save(geneStatsall, file = "rdas/MedialAmyg/geneStats_allcols_DE_qSVA_sexinterxn_threeGroup.rda")
> write.csv(geneStatsall, file = gzfile("csvs/MedialAmyg/geneStats_allcols_DE_qSVA_sexinterxn_threeGroup.csv.gz"))
> 
> ##########################################################
> 
> #dACC
> 
> #load rse_gene object
> load('rdas/rse_gene_PTSD_VA_LIBD_qcAndAnnotated_n1285.Rdata',verbose=TRUE)
Loading objects:
  rse_gene
> 
> ## add MDS (get ethnicity via genotype)
> load("rdas/PTSD_LIBD_VA_MDSonly_n326.rda",verbose=TRUE)
Loading objects:
  mds
> rownames(mds) = ss(rownames(mds),"_")
> colData(rse_gene) = cbind(colData(rse_gene) , mds[rse_gene$BrNum,])
> 
> ## expression filter to remove lowly expressed stuff (can do later as well)
> ##		do across all regions so we're looking at the same genes
> gIndex = rowMeans(getRPKM(rse_gene, "Length")) > 0.2
> rse_gene <- rse_gene[gIndex , ]
> 
> load('rdas/PTSD_qsvs_sexinterxn.Rdata',verbose=TRUE)
Loading objects:
  qsvBonf
  qSVs
  mod
  modQsva
> 
> 
> ###Analysis
> 
> #filter for dACC 
> keepIndex = which(rse_gene$Region == "dACC")
> rse_gene <- rse_gene[, keepIndex]
> 
> #Get rid of region columns
> colIndex <-  !grepl("Region", colnames(mod))
> mod <- mod[keepIndex, colIndex]
> modQsva <- modQsva[keepIndex,!grepl("Region", colnames(modQsva))]
> 
> 
> ##### GENE ######
> dge = DGEList(counts = assays(rse_gene)$counts,
+ 	genes = rowData(rse_gene))
> 
> #calculate library-size adjustment
> dge = calcNormFactors(dge)
> vGene = voom(dge,modQsva, plot=TRUE)
> fitGene = lmFit(vGene)
> eBGene = eBayes(fitGene)
> 
> 
> #MDD vs controls (analysis 1)
> sigGeneMDD = topTable(eBGene,coef=2,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneMDD) = paste0(colnames(sigGeneMDD), "_MDD")
> 
> #PTSD vs controls (analysis 1)
> sigGenePTSD = topTable(eBGene,coef=3,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGenePTSD) = paste0(colnames(sigGenePTSD), "_PTSD")
> 
> #Diagnosis interaction (analysis 3)
> sigGeneDx = topTable(eBGene,coef=2:3,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneDx) = paste0(colnames(sigGeneDx), "_ANOVA")
> 
> #PTSDvsMDD using limma
> PTSDvsMDDContrast <- makeContrasts(GroupPTSD-GroupMDD,levels=modQsva)
> PTSDvsMDDPost = topTable(eBayes(contrasts.fit(fitGene, PTSDvsMDDContrast)),
+     coef=1,  p.value = 1, sort="none", n = nrow(rse_gene))
> colnames(PTSDvsMDDPost) = paste0(colnames(PTSDvsMDDPost), "_PTSDvsMDD")
> 
> #Sex main effect
> sigGeneSex = topTable(eBGene,coef=4,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneSex) = paste0(colnames(sigGeneSex), "_Sex")
> 
> #Sex interaction MDD
> outGene_interactionEffect_MDD = topTable(eBGene,coef=18,
+         p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(outGene_interactionEffect_MDD) = paste0(colnames(outGene_interactionEffect_MDD), "_sexintxnMDD")
> 
> #Sex interaction PTSD
> outGene_interactionEffect_PTSD = topTable(eBGene,coef=19,
+         p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(outGene_interactionEffect_PTSD) = paste0(colnames(outGene_interactionEffect_PTSD), "_sexintxnPTSD")
> 
> 
> 
> #onlyPTSD analysis (analysis 2)
> # 1. redefine model
> # 2. add to geneStats
> 
> #load rse_gene object
> load('rdas/rse_gene_PTSD_VA_LIBD_qcAndAnnotated_n1285.Rdata',verbose=TRUE)
Loading objects:
  rse_gene
> 
> ## add MDS (get ethnicity via genotype)
> load("rdas/PTSD_LIBD_VA_MDSonly_n326.rda",verbose=TRUE)
Loading objects:
  mds
> rownames(mds) = ss(rownames(mds),"_")
> colData(rse_gene) = cbind(colData(rse_gene) , mds[rse_gene$BrNum,])
> 
> ## expression filter to remove lowly expressed stuff (can do later as well)
> ##		do across all regions so we're looking at the same genes
> gIndex = rowMeans(getRPKM(rse_gene, "Length")) > 0.2
> rse_gene <- rse_gene[gIndex , ]
> 
> #Define by PTSD 
> rse_gene$onlyPTSD = ifelse(rse_gene$Group == "PTSD" ,1, 0) 
> 
> load('rdas/PTSD_onlyPTSD_qsvs_sexinterxn.Rdata',verbose=TRUE)
Loading objects:
  qsvBonf
  qSVs
  mod
  modQsva
> 
> #filter for dACC 
> keepIndex = which(rse_gene$Region == "dACC")
> rse_gene <- rse_gene[, keepIndex]
> 
> #Get rid of region columns
> colIndex <- !grepl("Region", colnames(mod))
> mod <- mod[keepIndex, colIndex]
> modQsva <- modQsva[keepIndex,!grepl("Region", colnames(modQsva))]
> 
> 
> ##### GENE ######
> dge = DGEList(counts = assays(rse_gene)$counts,
+ 	genes = rowData(rse_gene))
> #calculate library-size adjustment
> dge = calcNormFactors(dge)
> vGene = voom(dge,modQsva, plot=TRUE)
> fitGene = lmFit(vGene)
> eBGene = eBayes(fitGene)
> 
> #PTSD only
> sigGeneonlyPTSD = topTable(eBGene,coef=2,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneonlyPTSD) = paste0(colnames(sigGeneonlyPTSD), "_onlyPTSD")
> 
> 
> #Sex interaction onlyPTSD
> outGene_interactionEffect_onlyPTSD = topTable(eBGene,coef=17,
+         p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(outGene_interactionEffect_onlyPTSD) = paste0(colnames(outGene_interactionEffect_onlyPTSD), "_sexintxnonlyPTSD")
> 
> 
> ###Stuff we want
> 
> ###### GENE ########
> 
> #All columns
> geneStatsall = cbind(sigGenePTSD, sigGeneMDD, sigGeneDx, sigGeneonlyPTSD, PTSDvsMDDPost, sigGeneSex, outGene_interactionEffect_MDD, outGene_interactionEffect_PTSD, outGene_interactionEffect_onlyPTSD)
> geneStatsall = cbind(geneStatsall, rowData(rse_gene))
> ## write out qSVA-based stats
> save(geneStatsall, file = "rdas/dACC/geneStats_allcols_DE_qSVA_sexinterxn_threeGroup.rda")
> write.csv(geneStatsall, file = gzfile("csvs/dACC/geneStats_allcols_DE_qSVA_sexinterxn_threeGroup.csv.gz"))
> 
> 
> ##########################################################
> 
> #DLPFC
> 
> #load rse_gene object
> load('rdas/rse_gene_PTSD_VA_LIBD_qcAndAnnotated_n1285.Rdata',verbose=TRUE)
Loading objects:
  rse_gene
> 
> ## add MDS (get ethnicity via genotype)
> load("rdas/PTSD_LIBD_VA_MDSonly_n326.rda",verbose=TRUE)
Loading objects:
  mds
> rownames(mds) = ss(rownames(mds),"_")
> colData(rse_gene) = cbind(colData(rse_gene) , mds[rse_gene$BrNum,])
> 
> ## expression filter to remove lowly expressed stuff (can do later as well)
> ##		do across all regions so we're looking at the same genes
> gIndex = rowMeans(getRPKM(rse_gene, "Length")) > 0.2
> rse_gene <- rse_gene[gIndex , ]
> 
> load('rdas/PTSD_qsvs_sexinterxn.Rdata',verbose=TRUE)
Loading objects:
  qsvBonf
  qSVs
  mod
  modQsva
> 
> 
> ###Analysis
> 
> #filter for DLPFC 
> keepIndex = which(rse_gene$Region == "DLPFC")
> rse_gene <- rse_gene[, keepIndex]
> 
> #Get rid of region columns
> colIndex <-  !grepl("Region", colnames(mod))
> mod <- mod[keepIndex, colIndex]
> modQsva <- modQsva[keepIndex,!grepl("Region", colnames(modQsva))]
> 
> 
> ##### GENE ######
> dge = DGEList(counts = assays(rse_gene)$counts,
+ 	genes = rowData(rse_gene))
> 
> #calculate library-size adjustment
> dge = calcNormFactors(dge)
> vGene = voom(dge,modQsva, plot=TRUE)
> fitGene = lmFit(vGene)
> eBGene = eBayes(fitGene)
> 
> 
> #MDD vs controls (analysis 1)
> sigGeneMDD = topTable(eBGene,coef=2,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneMDD) = paste0(colnames(sigGeneMDD), "_MDD")
> 
> #PTSD vs controls (analysis 1)
> sigGenePTSD = topTable(eBGene,coef=3,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGenePTSD) = paste0(colnames(sigGenePTSD), "_PTSD")
> 
> #Diagnosis interaction (analysis 3)
> sigGeneDx = topTable(eBGene,coef=2:3,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneDx) = paste0(colnames(sigGeneDx), "_ANOVA")
> 
> #PTSDvsMDD using limma
> PTSDvsMDDContrast <- makeContrasts(GroupPTSD-GroupMDD,levels=modQsva)
> PTSDvsMDDPost = topTable(eBayes(contrasts.fit(fitGene, PTSDvsMDDContrast)),
+     coef=1,  p.value = 1, sort="none", n = nrow(rse_gene))
> colnames(PTSDvsMDDPost) = paste0(colnames(PTSDvsMDDPost), "_PTSDvsMDD")
> 
> #Sex main effect
> sigGeneSex = topTable(eBGene,coef=4,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneSex) = paste0(colnames(sigGeneSex), "_Sex")
> 
> #Sex interaction MDD
> outGene_interactionEffect_MDD = topTable(eBGene,coef=18,
+         p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(outGene_interactionEffect_MDD) = paste0(colnames(outGene_interactionEffect_MDD), "_sexintxnMDD")
> 
> #Sex interaction PTSD
> outGene_interactionEffect_PTSD = topTable(eBGene,coef=19,
+         p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(outGene_interactionEffect_PTSD) = paste0(colnames(outGene_interactionEffect_PTSD), "_sexintxnPTSD")
> 
> 
> 
> #onlyPTSD analysis (analysis 2)
> # 1. redefine model
> # 2. add to geneStats
> 
> #load rse_gene object
> load('rdas/rse_gene_PTSD_VA_LIBD_qcAndAnnotated_n1285.Rdata',verbose=TRUE)
Loading objects:
  rse_gene
> 
> ## add MDS (get ethnicity via genotype)
> load("rdas/PTSD_LIBD_VA_MDSonly_n326.rda",verbose=TRUE)
Loading objects:
  mds
> rownames(mds) = ss(rownames(mds),"_")
> colData(rse_gene) = cbind(colData(rse_gene) , mds[rse_gene$BrNum,])
> 
> ## expression filter to remove lowly expressed stuff (can do later as well)
> ##		do across all regions so we're looking at the same genes
> gIndex = rowMeans(getRPKM(rse_gene, "Length")) > 0.2
> rse_gene <- rse_gene[gIndex , ]
> 
> #Define by PTSD 
> rse_gene$onlyPTSD = ifelse(rse_gene$Group == "PTSD" ,1, 0) 
> 
> load('rdas/PTSD_onlyPTSD_qsvs_sexinterxn.Rdata',verbose=TRUE)
Loading objects:
  qsvBonf
  qSVs
  mod
  modQsva
> 
> #filter for DLPFC 
> keepIndex = which(rse_gene$Region == "DLPFC")
> rse_gene <- rse_gene[, keepIndex]
> 
> #Get rid of region columns
> colIndex <- !grepl("Region", colnames(mod))
> mod <- mod[keepIndex, colIndex]
> modQsva <- modQsva[keepIndex,!grepl("Region", colnames(modQsva))]
> 
> 
> ##### GENE ######
> dge = DGEList(counts = assays(rse_gene)$counts,
+ 	genes = rowData(rse_gene))
> #calculate library-size adjustment
> dge = calcNormFactors(dge)
> vGene = voom(dge,modQsva, plot=TRUE)
> fitGene = lmFit(vGene)
> eBGene = eBayes(fitGene)
> 
> #PTSD only
> sigGeneonlyPTSD = topTable(eBGene,coef=2,
+ 	p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(sigGeneonlyPTSD) = paste0(colnames(sigGeneonlyPTSD), "_onlyPTSD")
> 
> 
> #Sex interaction onlyPTSD
> outGene_interactionEffect_onlyPTSD = topTable(eBGene,coef=17,
+         p.value = 1,number=nrow(rse_gene), sort="none")
> colnames(outGene_interactionEffect_onlyPTSD) = paste0(colnames(outGene_interactionEffect_onlyPTSD), "_sexintxnonlyPTSD")
> 
> 
> ###Stuff we want
> 
> ###### GENE ########
> 
> #All columns
> geneStatsall = cbind(sigGenePTSD, sigGeneMDD, sigGeneDx, sigGeneonlyPTSD, PTSDvsMDDPost, sigGeneSex, outGene_interactionEffect_MDD, outGene_interactionEffect_PTSD, outGene_interactionEffect_onlyPTSD)
> geneStatsall = cbind(geneStatsall, rowData(rse_gene))
> ## write out qSVA-based stats
> save(geneStatsall, file = "rdas/DLPFC/geneStats_allcols_DE_qSVA_sexinterxn_threeGroup.rda")
> write.csv(geneStatsall, file = gzfile("csvs/DLPFC/geneStats_allcols_DE_qSVA_sexinterxn_threeGroup.csv.gz"))
> 
> ## Reproducibility information
> print('Reproducibility information:')
[1] "Reproducibility information:"
> Sys.time()
[1] "2020-01-15 20:17:38 EST"
> proc.time()
   user  system elapsed 
634.900  28.894 670.962 
> options(width = 120)
> session_info()
─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────
 setting  value                       
 version  R version 3.6.1 (2019-07-05)
 os       CentOS Linux 7 (Core)       
 system   x86_64, linux-gnu           
 ui       X11                         
 language (EN)                        
 collate  en_US.UTF-8                 
 ctype    en_US.UTF-8                 
 tz       US/Eastern                  
 date     2020-01-15                  

─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────
 package              * version   date       lib source                                   
 acepack                1.4.1     2016-10-29 [1] CRAN (R 3.6.1)                           
 annotate               1.62.0    2019-05-02 [1] Bioconductor                             
 AnnotationDbi          1.46.1    2019-08-20 [1] Bioconductor                             
 assertthat             0.2.1     2019-03-21 [1] CRAN (R 3.6.1)                           
 backports              1.1.5     2019-10-02 [1] CRAN (R 3.6.1)                           
 base64enc              0.1-3     2015-07-28 [2] CRAN (R 3.6.1)                           
 bibtex                 0.4.2     2017-06-30 [1] CRAN (R 3.6.1)                           
 Biobase              * 2.44.0    2019-05-02 [1] Bioconductor                             
 BiocGenerics         * 0.30.0    2019-05-02 [1] Bioconductor                             
 BiocParallel         * 1.18.1    2019-08-06 [1] Bioconductor                             
 biomaRt                2.40.4    2019-08-19 [1] Bioconductor                             
 Biostrings             2.52.0    2019-05-02 [1] Bioconductor                             
 bit                    1.1-14    2018-05-29 [1] CRAN (R 3.6.1)                           
 bit64                  0.9-7     2017-05-08 [1] CRAN (R 3.6.1)                           
 bitops                 1.0-6     2013-08-17 [1] CRAN (R 3.6.1)                           
 blob                   1.2.0     2019-07-09 [1] CRAN (R 3.6.1)                           
 BSgenome               1.52.0    2019-05-02 [1] Bioconductor                             
 bumphunter             1.26.0    2019-05-02 [1] Bioconductor                             
 callr                  3.3.1     2019-07-18 [1] CRAN (R 3.6.1)                           
 cellranger             1.1.0     2016-07-27 [1] CRAN (R 3.6.1)                           
 checkmate              1.9.4     2019-07-04 [1] CRAN (R 3.6.1)                           
 cli                    2.0.0     2019-12-09 [1] CRAN (R 3.6.1)                           
 cluster                2.1.0     2019-06-19 [2] CRAN (R 3.6.1)                           
 codetools              0.2-16    2018-12-24 [2] CRAN (R 3.6.1)                           
 colorspace             1.4-1     2019-03-18 [1] CRAN (R 3.6.1)                           
 crayon                 1.3.4     2017-09-16 [1] CRAN (R 3.6.1)                           
 data.table             1.12.8    2019-12-09 [1] CRAN (R 3.6.1)                           
 DBI                    1.0.0     2018-05-02 [1] CRAN (R 3.6.1)                           
 DelayedArray         * 0.10.0    2019-05-02 [1] Bioconductor                             
 derfinder              1.18.4    2019-08-21 [1] Bioconductor                             
 derfinderHelper        1.18.1    2019-05-22 [1] Bioconductor                             
 desc                   1.2.0     2018-05-01 [1] CRAN (R 3.6.1)                           
 devtools             * 2.2.0     2019-09-07 [1] CRAN (R 3.6.1)                           
 digest                 0.6.23    2019-11-23 [1] CRAN (R 3.6.1)                           
 doRNG                  1.7.1     2018-06-22 [1] CRAN (R 3.6.1)                           
 downloader             0.4       2015-07-09 [1] CRAN (R 3.6.1)                           
 dplyr                  0.8.3     2019-07-04 [1] CRAN (R 3.6.1)                           
 DT                     0.8       2019-08-07 [1] CRAN (R 3.6.1)                           
 edgeR                * 3.26.8    2019-09-01 [1] Bioconductor                             
 ellipsis               0.3.0     2019-09-20 [1] CRAN (R 3.6.1)                           
 fansi                  0.4.0     2018-10-05 [1] CRAN (R 3.6.1)                           
 foreach                1.4.7     2019-07-27 [1] CRAN (R 3.6.1)                           
 foreign                0.8-71    2018-07-20 [2] CRAN (R 3.6.1)                           
 Formula                1.2-3     2018-05-03 [1] CRAN (R 3.6.1)                           
 fs                     1.3.1     2019-05-06 [1] CRAN (R 3.6.1)                           
 genefilter           * 1.66.0    2019-05-02 [1] Bioconductor                             
 GenomeInfoDb         * 1.20.0    2019-05-02 [1] Bioconductor                             
 GenomeInfoDbData       1.2.1     2019-09-09 [1] Bioconductor                             
 GenomicAlignments      1.20.1    2019-06-18 [1] Bioconductor                             
 GenomicFeatures        1.36.4    2019-07-10 [1] Bioconductor                             
 GenomicFiles           1.20.0    2019-05-02 [1] Bioconductor                             
 GenomicRanges        * 1.36.1    2019-09-06 [1] Bioconductor                             
 GEOquery               2.52.0    2019-05-02 [1] Bioconductor                             
 ggplot2                3.2.1     2019-08-10 [1] CRAN (R 3.6.1)                           
 glue                   1.3.1     2019-03-12 [2] CRAN (R 3.6.1)                           
 gridExtra              2.3       2017-09-09 [1] CRAN (R 3.6.1)                           
 gtable                 0.3.0     2019-03-25 [1] CRAN (R 3.6.1)                           
 Hmisc                  4.2-0     2019-01-26 [1] CRAN (R 3.6.1)                           
 hms                    0.5.1     2019-08-23 [1] CRAN (R 3.6.1)                           
 htmlTable              1.13.1    2019-01-07 [1] CRAN (R 3.6.1)                           
 htmltools              0.4.0     2019-10-04 [1] CRAN (R 3.6.1)                           
 htmlwidgets            1.5.1     2019-10-08 [1] CRAN (R 3.6.1)                           
 httr                   1.4.1     2019-08-05 [1] CRAN (R 3.6.1)                           
 IRanges              * 2.18.2    2019-08-24 [1] Bioconductor                             
 iterators              1.0.12    2019-07-26 [1] CRAN (R 3.6.1)                           
 jaffelab             * 0.99.27   2019-09-09 [1] Github (LieberInstitute/jaffelab@4eca012)
 jsonlite               1.6       2018-12-07 [2] CRAN (R 3.6.1)                           
 knitr                  1.24      2019-08-08 [1] CRAN (R 3.6.1)                           
 lattice                0.20-38   2018-11-04 [2] CRAN (R 3.6.1)                           
 latticeExtra           0.6-28    2016-02-09 [1] CRAN (R 3.6.1)                           
 lazyeval               0.2.2     2019-03-15 [1] CRAN (R 3.6.1)                           
 lifecycle              0.1.0     2019-08-01 [2] CRAN (R 3.6.1)                           
 limma                * 3.40.6    2019-07-26 [1] Bioconductor                             
 locfit                 1.5-9.1   2013-04-20 [1] CRAN (R 3.6.1)                           
 magrittr               1.5       2014-11-22 [2] CRAN (R 3.6.1)                           
 Matrix                 1.2-17    2019-03-22 [2] CRAN (R 3.6.1)                           
 matrixStats          * 0.55.0    2019-09-07 [1] CRAN (R 3.6.1)                           
 memoise                1.1.0     2017-04-21 [1] CRAN (R 3.6.1)                           
 mgcv                 * 1.8-28    2019-03-21 [2] CRAN (R 3.6.1)                           
 munsell                0.5.0     2018-06-12 [1] CRAN (R 3.6.1)                           
 nlme                 * 3.1-140   2019-05-12 [2] CRAN (R 3.6.1)                           
 nnet                   7.3-12    2016-02-02 [2] CRAN (R 3.6.1)                           
 pillar                 1.4.3     2019-12-20 [1] CRAN (R 3.6.1)                           
 pkgbuild               1.0.5     2019-08-26 [1] CRAN (R 3.6.1)                           
 pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 3.6.1)                           
 pkgload                1.0.2     2018-10-29 [1] CRAN (R 3.6.1)                           
 pkgmaker               0.27      2018-05-25 [1] CRAN (R 3.6.1)                           
 plyr                   1.8.5     2019-12-10 [1] CRAN (R 3.6.1)                           
 prettyunits            1.0.2     2015-07-13 [1] CRAN (R 3.6.1)                           
 processx               3.4.1     2019-07-18 [2] CRAN (R 3.6.1)                           
 progress               1.2.2     2019-05-16 [1] CRAN (R 3.6.1)                           
 ps                     1.3.0     2018-12-21 [2] CRAN (R 3.6.1)                           
 purrr                  0.3.3     2019-10-18 [1] CRAN (R 3.6.1)                           
 qvalue                 2.16.0    2019-05-02 [1] Bioconductor                             
 R6                     2.4.1     2019-11-12 [1] CRAN (R 3.6.1)                           
 rafalib              * 1.0.0     2015-08-09 [1] CRAN (R 3.6.1)                           
 RColorBrewer           1.1-2     2014-12-07 [1] CRAN (R 3.6.1)                           
 Rcpp                   1.0.3     2019-11-08 [1] CRAN (R 3.6.1)                           
 RCurl                  1.95-4.12 2019-03-04 [1] CRAN (R 3.6.1)                           
 readr                  1.3.1     2018-12-21 [1] CRAN (R 3.6.1)                           
 readxl               * 1.3.1     2019-03-13 [1] CRAN (R 3.6.1)                           
 recount              * 1.10.13   2019-09-03 [1] Bioconductor                             
 registry               0.5-1     2019-03-05 [1] CRAN (R 3.6.1)                           
 remotes                2.1.0     2019-06-24 [1] CRAN (R 3.6.1)                           
 rentrez                1.2.2     2019-05-02 [1] CRAN (R 3.6.1)                           
 reshape2               1.4.3     2017-12-11 [1] CRAN (R 3.6.1)                           
 rlang                  0.4.2     2019-11-23 [1] CRAN (R 3.6.1)                           
 rngtools               1.4       2019-07-01 [1] CRAN (R 3.6.1)                           
 rpart                  4.1-15    2019-04-12 [2] CRAN (R 3.6.1)                           
 rprojroot              1.3-2     2018-01-03 [1] CRAN (R 3.6.1)                           
 Rsamtools              2.0.0     2019-05-02 [1] Bioconductor                             
 RSQLite                2.1.2     2019-07-24 [1] CRAN (R 3.6.1)                           
 rstudioapi             0.10      2019-03-19 [2] CRAN (R 3.6.1)                           
 rtracklayer            1.44.4    2019-09-06 [1] Bioconductor                             
 S4Vectors            * 0.22.0    2019-05-02 [1] Bioconductor                             
 scales                 1.1.0     2019-11-18 [1] CRAN (R 3.6.1)                           
 segmented              1.0-0     2019-06-17 [1] CRAN (R 3.6.1)                           
 sessioninfo            1.1.1     2018-11-05 [1] CRAN (R 3.6.1)                           
 stringi                1.4.3     2019-03-12 [1] CRAN (R 3.6.1)                           
 stringr                1.4.0     2019-02-10 [1] CRAN (R 3.6.1)                           
 SummarizedExperiment * 1.14.1    2019-07-31 [1] Bioconductor                             
 survival               2.44-1.1  2019-04-01 [2] CRAN (R 3.6.1)                           
 sva                  * 3.32.1    2019-05-22 [1] Bioconductor                             
 testthat               2.2.1     2019-07-25 [1] CRAN (R 3.6.1)                           
 tibble                 2.1.3     2019-06-06 [1] CRAN (R 3.6.1)                           
 tidyr                  1.0.0     2019-09-11 [1] CRAN (R 3.6.1)                           
 tidyselect             0.2.5     2018-10-11 [2] CRAN (R 3.6.1)                           
 usethis              * 1.5.1     2019-07-04 [1] CRAN (R 3.6.1)                           
 VariantAnnotation      1.30.1    2019-05-19 [1] Bioconductor                             
 vctrs                  0.2.1     2019-12-17 [1] CRAN (R 3.6.1)                           
 withr                  2.1.2     2018-03-15 [1] CRAN (R 3.6.1)                           
 xfun                   0.9       2019-08-21 [1] CRAN (R 3.6.1)                           
 XML                    3.98-1.20 2019-06-06 [1] CRAN (R 3.6.1)                           
 xml2                   1.2.2     2019-08-09 [1] CRAN (R 3.6.1)                           
 xtable                 1.8-4     2019-04-21 [1] CRAN (R 3.6.1)                           
 XVector                0.24.0    2019-05-02 [1] Bioconductor                             
 zeallot                0.1.0     2018-01-28 [2] CRAN (R 3.6.1)                           
 zlibbioc               1.30.0    2019-05-02 [1] Bioconductor                             

[1] /users/bbarry/R/x86_64-pc-linux-gnu-library/3.6
[2] /jhpce/shared/jhpce/core/R/3.6.1/lib64/R/library
> 
> q()
> proc.time()
   user  system elapsed 
635.240  29.022 672.089 
